// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/routing/routing.proto

package routing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutingClient is the client API for Routing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingClient interface {
	// ContentRouting
	// Provide adds the given cid to the content routing system. If 'true' is
	// passed, it also announces it, otherwise it is just kept in the local
	// accounting of which objects are being provided.
	Provide(ctx context.Context, in *ProvideReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Search for peers who are able to provide a given key
	//
	// When count is 0, this method will return an unbounded number of
	// results.
	FindProvidersAsync(ctx context.Context, in *GetProvidersReq, opts ...grpc.CallOption) (Routing_FindProvidersAsyncClient, error)
	// ValueStore
	// PutValue adds value corresponding to given Key.
	PutValue(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetValue searches for the value corresponding to given Key.
	GetValue(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetReply, error)
	// SearchValue searches for better and better values from this value
	// store corresponding to the given Key. By default implementations must
	// stop the search after a good value is found. A 'good' value is a value
	// that would be returned from GetValue.
	//
	// Useful when you want a result *now* but still want to hear about
	// better/newer results.
	//
	// Implementations of this methods won't return ErrNotFound. When a value
	// couldn't be found, the channel will get closed without passing any results
	SearchValue(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (Routing_SearchValueClient, error)
	// PeerRouting
	// FindPeer searches for a peer with given ID, returns a peer.AddrInfo
	// with relevant addresses.
	FindPeer(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*AddrInfo, error)
	// BitSwap Block API
	GetBlock(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*Block, error)
	GetBlocks(ctx context.Context, in *Cids, opts ...grpc.CallOption) (Routing_GetBlocksClient, error)
}

type routingClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingClient(cc grpc.ClientConnInterface) RoutingClient {
	return &routingClient{cc}
}

func (c *routingClient) Provide(ctx context.Context, in *ProvideReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ipfs.routing.Routing/Provide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) FindProvidersAsync(ctx context.Context, in *GetProvidersReq, opts ...grpc.CallOption) (Routing_FindProvidersAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Routing_ServiceDesc.Streams[0], "/api.ipfs.routing.Routing/FindProvidersAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingFindProvidersAsyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Routing_FindProvidersAsyncClient interface {
	Recv() (*AddrInfo, error)
	grpc.ClientStream
}

type routingFindProvidersAsyncClient struct {
	grpc.ClientStream
}

func (x *routingFindProvidersAsyncClient) Recv() (*AddrInfo, error) {
	m := new(AddrInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingClient) PutValue(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ipfs.routing.Routing/PutValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) GetValue(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/api.ipfs.routing.Routing/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) SearchValue(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (Routing_SearchValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &Routing_ServiceDesc.Streams[1], "/api.ipfs.routing.Routing/SearchValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingSearchValueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Routing_SearchValueClient interface {
	Recv() (*SearchReply, error)
	grpc.ClientStream
}

type routingSearchValueClient struct {
	grpc.ClientStream
}

func (x *routingSearchValueClient) Recv() (*SearchReply, error) {
	m := new(SearchReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routingClient) FindPeer(ctx context.Context, in *Peer, opts ...grpc.CallOption) (*AddrInfo, error) {
	out := new(AddrInfo)
	err := c.cc.Invoke(ctx, "/api.ipfs.routing.Routing/FindPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) GetBlock(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/api.ipfs.routing.Routing/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingClient) GetBlocks(ctx context.Context, in *Cids, opts ...grpc.CallOption) (Routing_GetBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Routing_ServiceDesc.Streams[2], "/api.ipfs.routing.Routing/GetBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &routingGetBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Routing_GetBlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type routingGetBlocksClient struct {
	grpc.ClientStream
}

func (x *routingGetBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoutingServer is the server API for Routing service.
// All implementations must embed UnimplementedRoutingServer
// for forward compatibility
type RoutingServer interface {
	// ContentRouting
	// Provide adds the given cid to the content routing system. If 'true' is
	// passed, it also announces it, otherwise it is just kept in the local
	// accounting of which objects are being provided.
	Provide(context.Context, *ProvideReq) (*emptypb.Empty, error)
	// Search for peers who are able to provide a given key
	//
	// When count is 0, this method will return an unbounded number of
	// results.
	FindProvidersAsync(*GetProvidersReq, Routing_FindProvidersAsyncServer) error
	// ValueStore
	// PutValue adds value corresponding to given Key.
	PutValue(context.Context, *PutReq) (*emptypb.Empty, error)
	// GetValue searches for the value corresponding to given Key.
	GetValue(context.Context, *GetReq) (*GetReply, error)
	// SearchValue searches for better and better values from this value
	// store corresponding to the given Key. By default implementations must
	// stop the search after a good value is found. A 'good' value is a value
	// that would be returned from GetValue.
	//
	// Useful when you want a result *now* but still want to hear about
	// better/newer results.
	//
	// Implementations of this methods won't return ErrNotFound. When a value
	// couldn't be found, the channel will get closed without passing any results
	SearchValue(*SearchReq, Routing_SearchValueServer) error
	// PeerRouting
	// FindPeer searches for a peer with given ID, returns a peer.AddrInfo
	// with relevant addresses.
	FindPeer(context.Context, *Peer) (*AddrInfo, error)
	// BitSwap Block API
	GetBlock(context.Context, *Cid) (*Block, error)
	GetBlocks(*Cids, Routing_GetBlocksServer) error
	mustEmbedUnimplementedRoutingServer()
}

// UnimplementedRoutingServer must be embedded to have forward compatible implementations.
type UnimplementedRoutingServer struct {
}

func (UnimplementedRoutingServer) Provide(context.Context, *ProvideReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provide not implemented")
}
func (UnimplementedRoutingServer) FindProvidersAsync(*GetProvidersReq, Routing_FindProvidersAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method FindProvidersAsync not implemented")
}
func (UnimplementedRoutingServer) PutValue(context.Context, *PutReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutValue not implemented")
}
func (UnimplementedRoutingServer) GetValue(context.Context, *GetReq) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedRoutingServer) SearchValue(*SearchReq, Routing_SearchValueServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchValue not implemented")
}
func (UnimplementedRoutingServer) FindPeer(context.Context, *Peer) (*AddrInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPeer not implemented")
}
func (UnimplementedRoutingServer) GetBlock(context.Context, *Cid) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedRoutingServer) GetBlocks(*Cids, Routing_GetBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedRoutingServer) mustEmbedUnimplementedRoutingServer() {}

// UnsafeRoutingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingServer will
// result in compilation errors.
type UnsafeRoutingServer interface {
	mustEmbedUnimplementedRoutingServer()
}

func RegisterRoutingServer(s grpc.ServiceRegistrar, srv RoutingServer) {
	s.RegisterService(&Routing_ServiceDesc, srv)
}

func _Routing_Provide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).Provide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.routing.Routing/Provide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).Provide(ctx, req.(*ProvideReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_FindProvidersAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProvidersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingServer).FindProvidersAsync(m, &routingFindProvidersAsyncServer{stream})
}

type Routing_FindProvidersAsyncServer interface {
	Send(*AddrInfo) error
	grpc.ServerStream
}

type routingFindProvidersAsyncServer struct {
	grpc.ServerStream
}

func (x *routingFindProvidersAsyncServer) Send(m *AddrInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Routing_PutValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).PutValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.routing.Routing/PutValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).PutValue(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.routing.Routing/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).GetValue(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_SearchValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingServer).SearchValue(m, &routingSearchValueServer{stream})
}

type Routing_SearchValueServer interface {
	Send(*SearchReply) error
	grpc.ServerStream
}

type routingSearchValueServer struct {
	grpc.ServerStream
}

func (x *routingSearchValueServer) Send(m *SearchReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Routing_FindPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).FindPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.routing.Routing/FindPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).FindPeer(ctx, req.(*Peer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.routing.Routing/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingServer).GetBlock(ctx, req.(*Cid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routing_GetBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Cids)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutingServer).GetBlocks(m, &routingGetBlocksServer{stream})
}

type Routing_GetBlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type routingGetBlocksServer struct {
	grpc.ServerStream
}

func (x *routingGetBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

// Routing_ServiceDesc is the grpc.ServiceDesc for Routing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ipfs.routing.Routing",
	HandlerType: (*RoutingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Provide",
			Handler:    _Routing_Provide_Handler,
		},
		{
			MethodName: "PutValue",
			Handler:    _Routing_PutValue_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _Routing_GetValue_Handler,
		},
		{
			MethodName: "FindPeer",
			Handler:    _Routing_FindPeer_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Routing_GetBlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindProvidersAsync",
			Handler:       _Routing_FindProvidersAsync_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchValue",
			Handler:       _Routing_SearchValue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlocks",
			Handler:       _Routing_GetBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/routing/routing.proto",
}
