// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/contentrouting/contentrouting.proto

package contentrouting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentRoutingClient is the client API for ContentRouting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentRoutingClient interface {
	// Provide adds the given cid to the content routing system. If 'true' is
	// passed, it also announces it, otherwise it is just kept in the local
	// accounting of which objects are being provided.
	Provide(ctx context.Context, in *ProvideReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Search for peers who are able to provide a given key
	//
	// When count is 0, this method will return an unbounded number of
	// results.
	FindProvidersAsync(ctx context.Context, in *GetProvidersReq, opts ...grpc.CallOption) (ContentRouting_FindProvidersAsyncClient, error)
}

type contentRoutingClient struct {
	cc grpc.ClientConnInterface
}

func NewContentRoutingClient(cc grpc.ClientConnInterface) ContentRoutingClient {
	return &contentRoutingClient{cc}
}

func (c *contentRoutingClient) Provide(ctx context.Context, in *ProvideReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ipfs.content.routing.ContentRouting/Provide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentRoutingClient) FindProvidersAsync(ctx context.Context, in *GetProvidersReq, opts ...grpc.CallOption) (ContentRouting_FindProvidersAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentRouting_ServiceDesc.Streams[0], "/api.ipfs.content.routing.ContentRouting/FindProvidersAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentRoutingFindProvidersAsyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentRouting_FindProvidersAsyncClient interface {
	Recv() (*AddrInfo, error)
	grpc.ClientStream
}

type contentRoutingFindProvidersAsyncClient struct {
	grpc.ClientStream
}

func (x *contentRoutingFindProvidersAsyncClient) Recv() (*AddrInfo, error) {
	m := new(AddrInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentRoutingServer is the server API for ContentRouting service.
// All implementations must embed UnimplementedContentRoutingServer
// for forward compatibility
type ContentRoutingServer interface {
	// Provide adds the given cid to the content routing system. If 'true' is
	// passed, it also announces it, otherwise it is just kept in the local
	// accounting of which objects are being provided.
	Provide(context.Context, *ProvideReq) (*emptypb.Empty, error)
	// Search for peers who are able to provide a given key
	//
	// When count is 0, this method will return an unbounded number of
	// results.
	FindProvidersAsync(*GetProvidersReq, ContentRouting_FindProvidersAsyncServer) error
	mustEmbedUnimplementedContentRoutingServer()
}

// UnimplementedContentRoutingServer must be embedded to have forward compatible implementations.
type UnimplementedContentRoutingServer struct {
}

func (UnimplementedContentRoutingServer) Provide(context.Context, *ProvideReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provide not implemented")
}
func (UnimplementedContentRoutingServer) FindProvidersAsync(*GetProvidersReq, ContentRouting_FindProvidersAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method FindProvidersAsync not implemented")
}
func (UnimplementedContentRoutingServer) mustEmbedUnimplementedContentRoutingServer() {}

// UnsafeContentRoutingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentRoutingServer will
// result in compilation errors.
type UnsafeContentRoutingServer interface {
	mustEmbedUnimplementedContentRoutingServer()
}

func RegisterContentRoutingServer(s grpc.ServiceRegistrar, srv ContentRoutingServer) {
	s.RegisterService(&ContentRouting_ServiceDesc, srv)
}

func _ContentRouting_Provide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentRoutingServer).Provide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.content.routing.ContentRouting/Provide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentRoutingServer).Provide(ctx, req.(*ProvideReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentRouting_FindProvidersAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProvidersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentRoutingServer).FindProvidersAsync(m, &contentRoutingFindProvidersAsyncServer{stream})
}

type ContentRouting_FindProvidersAsyncServer interface {
	Send(*AddrInfo) error
	grpc.ServerStream
}

type contentRoutingFindProvidersAsyncServer struct {
	grpc.ServerStream
}

func (x *contentRoutingFindProvidersAsyncServer) Send(m *AddrInfo) error {
	return x.ServerStream.SendMsg(m)
}

// ContentRouting_ServiceDesc is the grpc.ServiceDesc for ContentRouting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentRouting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ipfs.content.routing.ContentRouting",
	HandlerType: (*ContentRoutingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Provide",
			Handler:    _ContentRouting_Provide_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindProvidersAsync",
			Handler:       _ContentRouting_FindProvidersAsync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/contentrouting/contentrouting.proto",
}
