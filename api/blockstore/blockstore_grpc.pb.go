// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/blockstore/blockstore.proto

package blockstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockstoreClient is the client API for Blockstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockstoreClient interface {
	DeleteBlock(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Has(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	Get(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*Block, error)
	GetSize(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error)
	Put(ctx context.Context, in *Block, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PutMany(ctx context.Context, opts ...grpc.CallOption) (Blockstore_PutManyClient, error)
	AllKeysChan(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Blockstore_AllKeysChanClient, error)
}

type blockstoreClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockstoreClient(cc grpc.ClientConnInterface) BlockstoreClient {
	return &blockstoreClient{cc}
}

func (c *blockstoreClient) DeleteBlock(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ipfs.blockstore.Blockstore/DeleteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockstoreClient) Has(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/api.ipfs.blockstore.Blockstore/Has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockstoreClient) Get(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/api.ipfs.blockstore.Blockstore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockstoreClient) GetSize(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*wrapperspb.Int32Value, error) {
	out := new(wrapperspb.Int32Value)
	err := c.cc.Invoke(ctx, "/api.ipfs.blockstore.Blockstore/GetSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockstoreClient) Put(ctx context.Context, in *Block, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ipfs.blockstore.Blockstore/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockstoreClient) PutMany(ctx context.Context, opts ...grpc.CallOption) (Blockstore_PutManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blockstore_ServiceDesc.Streams[0], "/api.ipfs.blockstore.Blockstore/PutMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockstorePutManyClient{stream}
	return x, nil
}

type Blockstore_PutManyClient interface {
	Send(*Block) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type blockstorePutManyClient struct {
	grpc.ClientStream
}

func (x *blockstorePutManyClient) Send(m *Block) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blockstorePutManyClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockstoreClient) AllKeysChan(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Blockstore_AllKeysChanClient, error) {
	stream, err := c.cc.NewStream(ctx, &Blockstore_ServiceDesc.Streams[1], "/api.ipfs.blockstore.Blockstore/AllKeysChan", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockstoreAllKeysChanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Blockstore_AllKeysChanClient interface {
	Recv() (*Cid, error)
	grpc.ClientStream
}

type blockstoreAllKeysChanClient struct {
	grpc.ClientStream
}

func (x *blockstoreAllKeysChanClient) Recv() (*Cid, error) {
	m := new(Cid)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockstoreServer is the server API for Blockstore service.
// All implementations must embed UnimplementedBlockstoreServer
// for forward compatibility
type BlockstoreServer interface {
	DeleteBlock(context.Context, *Cid) (*emptypb.Empty, error)
	Has(context.Context, *Cid) (*wrapperspb.BoolValue, error)
	Get(context.Context, *Cid) (*Block, error)
	GetSize(context.Context, *Cid) (*wrapperspb.Int32Value, error)
	Put(context.Context, *Block) (*emptypb.Empty, error)
	PutMany(Blockstore_PutManyServer) error
	AllKeysChan(*emptypb.Empty, Blockstore_AllKeysChanServer) error
	mustEmbedUnimplementedBlockstoreServer()
}

// UnimplementedBlockstoreServer must be embedded to have forward compatible implementations.
type UnimplementedBlockstoreServer struct {
}

func (UnimplementedBlockstoreServer) DeleteBlock(context.Context, *Cid) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (UnimplementedBlockstoreServer) Has(context.Context, *Cid) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (UnimplementedBlockstoreServer) Get(context.Context, *Cid) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBlockstoreServer) GetSize(context.Context, *Cid) (*wrapperspb.Int32Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSize not implemented")
}
func (UnimplementedBlockstoreServer) Put(context.Context, *Block) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedBlockstoreServer) PutMany(Blockstore_PutManyServer) error {
	return status.Errorf(codes.Unimplemented, "method PutMany not implemented")
}
func (UnimplementedBlockstoreServer) AllKeysChan(*emptypb.Empty, Blockstore_AllKeysChanServer) error {
	return status.Errorf(codes.Unimplemented, "method AllKeysChan not implemented")
}
func (UnimplementedBlockstoreServer) mustEmbedUnimplementedBlockstoreServer() {}

// UnsafeBlockstoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockstoreServer will
// result in compilation errors.
type UnsafeBlockstoreServer interface {
	mustEmbedUnimplementedBlockstoreServer()
}

func RegisterBlockstoreServer(s grpc.ServiceRegistrar, srv BlockstoreServer) {
	s.RegisterService(&Blockstore_ServiceDesc, srv)
}

func _Blockstore_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockstoreServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.blockstore.Blockstore/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockstoreServer).DeleteBlock(ctx, req.(*Cid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockstore_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockstoreServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.blockstore.Blockstore/Has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockstoreServer).Has(ctx, req.(*Cid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockstore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockstoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.blockstore.Blockstore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockstoreServer).Get(ctx, req.(*Cid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockstore_GetSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockstoreServer).GetSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.blockstore.Blockstore/GetSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockstoreServer).GetSize(ctx, req.(*Cid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockstore_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockstoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.blockstore.Blockstore/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockstoreServer).Put(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blockstore_PutMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockstoreServer).PutMany(&blockstorePutManyServer{stream})
}

type Blockstore_PutManyServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Block, error)
	grpc.ServerStream
}

type blockstorePutManyServer struct {
	grpc.ServerStream
}

func (x *blockstorePutManyServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blockstorePutManyServer) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Blockstore_AllKeysChan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockstoreServer).AllKeysChan(m, &blockstoreAllKeysChanServer{stream})
}

type Blockstore_AllKeysChanServer interface {
	Send(*Cid) error
	grpc.ServerStream
}

type blockstoreAllKeysChanServer struct {
	grpc.ServerStream
}

func (x *blockstoreAllKeysChanServer) Send(m *Cid) error {
	return x.ServerStream.SendMsg(m)
}

// Blockstore_ServiceDesc is the grpc.ServiceDesc for Blockstore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blockstore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ipfs.blockstore.Blockstore",
	HandlerType: (*BlockstoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteBlock",
			Handler:    _Blockstore_DeleteBlock_Handler,
		},
		{
			MethodName: "Has",
			Handler:    _Blockstore_Has_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Blockstore_Get_Handler,
		},
		{
			MethodName: "GetSize",
			Handler:    _Blockstore_GetSize_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Blockstore_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutMany",
			Handler:       _Blockstore_PutMany_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllKeysChan",
			Handler:       _Blockstore_AllKeysChan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/blockstore/blockstore.proto",
}
