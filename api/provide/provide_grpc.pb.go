// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/provide/provide.proto

package provide

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProvideClient is the client API for Provide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvideClient interface {
	Provide(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Reprovide(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type provideClient struct {
	cc grpc.ClientConnInterface
}

func NewProvideClient(cc grpc.ClientConnInterface) ProvideClient {
	return &provideClient{cc}
}

func (c *provideClient) Provide(ctx context.Context, in *Cid, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ipfs.provide.Provide/Provide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provideClient) Reprovide(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ipfs.provide.Provide/Reprovide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provideClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.ipfs.provide.Provide/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvideServer is the server API for Provide service.
// All implementations must embed UnimplementedProvideServer
// for forward compatibility
type ProvideServer interface {
	Provide(context.Context, *Cid) (*emptypb.Empty, error)
	Reprovide(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedProvideServer()
}

// UnimplementedProvideServer must be embedded to have forward compatible implementations.
type UnimplementedProvideServer struct {
}

func (UnimplementedProvideServer) Provide(context.Context, *Cid) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provide not implemented")
}
func (UnimplementedProvideServer) Reprovide(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reprovide not implemented")
}
func (UnimplementedProvideServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedProvideServer) mustEmbedUnimplementedProvideServer() {}

// UnsafeProvideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvideServer will
// result in compilation errors.
type UnsafeProvideServer interface {
	mustEmbedUnimplementedProvideServer()
}

func RegisterProvideServer(s grpc.ServiceRegistrar, srv ProvideServer) {
	s.RegisterService(&Provide_ServiceDesc, srv)
}

func _Provide_Provide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvideServer).Provide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.provide.Provide/Provide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvideServer).Provide(ctx, req.(*Cid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provide_Reprovide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvideServer).Reprovide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.provide.Provide/Reprovide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvideServer).Reprovide(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provide_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvideServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ipfs.provide.Provide/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvideServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Provide_ServiceDesc is the grpc.ServiceDesc for Provide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ipfs.provide.Provide",
	HandlerType: (*ProvideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Provide",
			Handler:    _Provide_Provide_Handler,
		},
		{
			MethodName: "Reprovide",
			Handler:    _Provide_Reprovide_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Provide_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/provide/provide.proto",
}
