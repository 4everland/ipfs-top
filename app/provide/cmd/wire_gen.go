// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/4everland/ipfs-servers/app/provide/conf"
	"github.com/4everland/ipfs-servers/app/provide/data"
	"github.com/4everland/ipfs-servers/app/provide/server"
	"github.com/4everland/ipfs-servers/app/provide/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init task receiver server application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	datastore := data.NewLevelDbDatastore(confData)
	queue, err := service.ProviderQueue(datastore)
	if err != nil {
		return nil, nil, err
	}
	contentRouting := data.NewContentRouting(confData)
	provider := service.SimpleProvider(queue, contentRouting)
	keyChanFunc := data.NewKeyChanFunc(confData)
	reprovider, err := service.SimpleReprovider(confData, contentRouting, keyChanFunc)
	if err != nil {
		return nil, nil, err
	}
	provideService := service.NewProvideService(provider, reprovider)
	grpcServer := server.NewProvideGRPCServer(confServer, provideService, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
	}, nil
}
